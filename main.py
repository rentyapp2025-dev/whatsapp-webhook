import os
import hmac
import hashlib
import json
import re
from typing import Optional, Any, Dict, List
import logging

from fastapi import FastAPI, Request, Response, HTTPException, Query
from fastapi.responses import PlainTextResponse
import httpx

# Configurar el logging para ver mensajes detallados
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Obtener variables de entorno. Es crucial que estas est√©n configuradas correctamente.
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "")
WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN", "")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID", "")
APP_SECRET = os.getenv("APP_SECRET", "").encode("utf-8") if os.getenv("APP_SECRET") else b""
GRAPH_API_VERSION = os.getenv("GRAPH_API_VERSION", "v20.0")
GRAPH_BASE = f"https://graph.facebook.com/{GRAPH_API_VERSION}"

# Verificar que las variables de entorno cruciales est√©n presentes
if not all([VERIFY_TOKEN, WHATSAPP_TOKEN, PHONE_NUMBER_ID]):
    logging.error("Faltan variables de entorno cruciales: VERIFY_TOKEN, WHATSAPP_TOKEN, o PHONE_NUMBER_ID no est√°n configuradas.")
    logging.info("Aseg√∫rate de configurar estas variables en tu entorno de despliegue (por ejemplo, en Render.com).")

app = FastAPI(title="WhatsApp Cloud API Webhook (Render/FastAPI)")

# ==================== Base de Conocimiento PER CAPITAL ====================
QA_CATEGORIZED = {
    "per_capital": {
        "title": "üè¶ PER CAPITAL",
        "questions": {
            "que_es_per_capital": {
                "title": "¬øQu√© es Per Capital?",
                "answer": "Es un grupo de empresas del Mercado de Valores Venezolano reguladas por la SUNAVAL."
            },
            "quien_regula": {
                "title": "¬øQui√©n regula a PER CAPITAL?",
                "answer": "La SUNAVAL (Superintendencia Nacional de Valores)"
            },
            "que_es_sunaval": {
                "title": "¬øQu√© es la SUNAVAL?",
                "answer": "Es quien protege a inversionistas y regula a intermediarios y emisores del Mercado de Valores venezolano"
            },
            "bolsa_valores": {
                "title": "¬øQu√© es la Bolsa de Valores de Caracas?",
                "answer": "Es el lugar donde se compran y venden bonos, acciones y otros instrumentos de manera ordenada a trav√©s de las Casas de Bolsa y est√° regulada por la SUNAVAL"
            },
            "como_invertir_inicial": {
                "title": "¬øC√≥mo invierto?",
                "answer": "Para invertir en el Fondo Mutual Abierto de PER CAPITAL debes descargar el app, registrarte, subir recaudos y colocar tus √≥rdenes de compra."
            }
        }
    },
    "fondo_mutual": {
        "title": "üí∞ FONDO MUTUAL ABIERTO",
        "questions": {
            "que_es_fondo_mutual": {
                "title": "¬øQu√© es un Fondo Mutual?",
                "answer": "Es un instrumento de inversi√≥n en grupo donde varias personas ponen dinero en un fondo que es gestionado por expertos y est√° dise√±ado para ser diversificado, de bajo riesgo y dirigido a peque√±os inversionistas con poca experiencia"
            },
            "unidad_inversion": {
                "title": "¬øQu√© es una Unidad de Inversi√≥n?",
                "answer": "Es una \"porci√≥n\" del fondo. Cuando inviertes adquieres unidades que representan tu parte del fondo."
            },
            "que_es_vui": {
                "title": "¬øQu√© es el VUI?",
                "answer": "El Valor de la Unidad de Inversi√≥n (VUI) es el precio de una Unidad de Inversi√≥n. Si el VUI sube tu inversi√≥n gana valor. Se calcula diariamente al cierre del d√≠a y depende del comportamiento de las inversiones del fondo."
            },
            "como_invertir_fondo": {
                "title": "¬øC√≥mo invierto en el fondo?",
                "answer": "Descarga el app para Android y iOS, reg√≠strate, sube recaudos, acepta los contratos, espera tu aprobaci√≥n y suscribe Unidades de Inversi√≥n cuando quieras y cuantas veces desees"
            },
            "monto_minimo": {
                "title": "¬øCu√°l es el monto m√≠nimo de inversi√≥n?",
                "answer": "1 Unidad de Inversi√≥n"
            },
            "como_gano": {
                "title": "¬øC√≥mo gano dinero?",
                "answer": "Ganas por apreciaci√≥n (subida del VUI) o por dividendo (en caso de que sea decretado)"
            },
            "tiempo_ganancia": {
                "title": "¬øEn cu√°nto tiempo gano?",
                "answer": "Ganas a largo plazo, se recomienda medir resultados trimestralmente"
            },
            "mas_informacion": {
                "title": "¬øD√≥nde consigo m√°s informaci√≥n?",
                "answer": "En los prospectos y hojas de t√©rminos en www.per-capital.com"
            }
        }
    },
    "app_uso": {
        "title": "üì± USO DE LA APP",
        "questions": {
            "comprar_acciones_bonos": {
                "title": "¬øPuedo comprar acciones y bonos?",
                "answer": "No, nuestra app es √∫nicamente para invertir en nuestro Fondo Mutual Abierto. Pronto saldr√° la nueva versi√≥n de nuestra app para negociar"
            },
            "como_registro": {
                "title": "¬øC√≥mo me registro?",
                "answer": "Descarga el app, completa 100% de los datos, acepta los contratos, sube tus recaudos como C√©dula de Identidad y Selfie y espera tu aprobaci√≥n."
            },
            "tiempo_aprobacion": {
                "title": "¬øCu√°nto tarda mi aprobaci√≥n?",
                "answer": "De 2 a 5 d√≠as h√°biles siempre que hayas completado 100% de registro y recaudos"
            },
            "no_aprobacion": {
                "title": "¬øQu√© hago si no me aprueban?",
                "answer": "Revisa que hayas completado 100% del registro y recaudos, sino cont√°ctanos en SOPORTE"
            },
            "menor_edad": {
                "title": "¬øPuedo invertir si soy menor de edad?",
                "answer": "Debes dirigirte a nuestras oficinas y registrarte con tu representante legal"
            },
            "modificar_datos": {
                "title": "¬øPuedo modificar alguno de mis datos?",
                "answer": "S√≠, pero por exigencia de la ley entras nuevamente en revisi√≥n"
            },
            "cuenta_caja_venezolana": {
                "title": "¬øDebo tener cuenta en la Caja Venezolana?",
                "answer": "No, para invertir en nuestro Fondo Mutual Abierto no es necesaria la cuenta en la CVV"
            },
            "como_suscribir": {
                "title": "¬øC√≥mo suscribo (compro)?",
                "answer": "Haz click en Negociaci√≥n > Suscripci√≥n > Monto a invertir > Suscribir > M√©todo de Pago. Recuerda pagar desde TU cuenta bancaria y subir comprobante de pago"
            },
            "como_pagar": {
                "title": "¬øC√≥mo pago mi suscripci√≥n?",
                "answer": "Debes pagar desde TU cuenta bancaria v√≠a Pago M√≥vil. Y recuerda subir comprobante. IMPORTANTE: no se aceptan pagos de terceros."
            },
            "pago_terceros": {
                "title": "¬øPuede pagar alguien por m√≠?",
                "answer": "No, la ley proh√≠be los pagos de terceros. Siempre debes pagar desde tu cuenta bancaria."
            },
            "ver_inversion": {
                "title": "¬øC√≥mo veo mi inversi√≥n?",
                "answer": "En el Home en la secci√≥n Mi Cuenta"
            },
            "cuando_ver_inversion": {
                "title": "¬øCu√°ndo veo mi inversi√≥n?",
                "answer": "Al cierre del sistema en d√≠as h√°biles bancarios despu√©s del cierre de mercado y la publicaci√≥n de tasas del Banco Central de Venezuela."
            },
            "comisiones": {
                "title": "¬øCu√°les son las comisiones?",
                "answer": "3% flat Suscripci√≥n, 3% flat Rescate y 5% anual Administraci√≥n"
            },
            "como_rescatar": {
                "title": "¬øC√≥mo rescato (vendo)?",
                "answer": "Haz click en Negociaci√≥n > Rescate > Unidades a Rescatar > Rescatar. Recuerda se enviar√°n fondos a TU cuenta bancaria"
            },
            "cuando_pagan_rescates": {
                "title": "¬øCu√°ndo me pagan mis rescates?",
                "answer": "Al pr√≥ximo d√≠a h√°bil bancario en horario de mercado"
            },
            "cuando_rescatar": {
                "title": "¬øCu√°ndo puedo rescatar?",
                "answer": "Cuando t√∫ quieras, y se liquida en d√≠as h√°biles bancarios."
            },
            "actualizacion_posicion": {
                "title": "¬øCu√°ndo se actualiza mi posici√≥n?",
                "answer": "Al cierre del sistema en d√≠as h√°biles bancarios despu√©s del cierre de mercado y la publicaci√≥n de tasas del Banco Central de Venezuela."
            },
            "por_que_varia_posicion": {
                "title": "¬øPor qu√© var√≠a mi posici√≥n?",
                "answer": "Tu saldo y rendimiento sube si suben los precios de las inversiones del fondo, se reciben dividendos o cupones y bajan si estos precios caen."
            },
            "ver_historico": {
                "title": "¬øD√≥nde veo mi hist√≥rico?",
                "answer": "En la secci√≥n Historial"
            },
            "ver_reportes": {
                "title": "¬øD√≥nde veo reportes?",
                "answer": "En la secci√≥n Documentos > Reportes > A√±o > Trimestre"
            }
        }
    },
    "riesgos_soporte": {
        "title": "‚ö†Ô∏è RIESGOS Y SOPORTE",
        "questions": {
            "riesgos_inversion": {
                "title": "¬øCu√°les son los riesgos al invertir?",
                "answer": "Todas las inversiones est√°n sujetas a riesgos y la p√©rdida de capital es posible. Algunos riesgos son: riesgo de mercado, riesgo pa√≠s, riesgo cambiario, riesgo sector, entre otros."
            },
            "en_revision": {
                "title": "Estoy en revisi√≥n, ¬øqu√© hago?",
                "answer": "Aseg√∫rate de haber completado 100% datos y recaudos y espera tu aprobaci√≥n. Si tarda m√°s de lo habitual cont√°ctanos en SOPORTE"
            },
            "no_llega_sms": {
                "title": "No me llega el SMS",
                "answer": "Aseg√∫rate de tener buena se√±al y de que hayas colocado correctamente un n√∫mero telef√≥nico venezolano"
            },
            "no_llega_correo": {
                "title": "No me llega el correo",
                "answer": "Aseg√∫rate de no dejar espacios al final cuando escribiste tu correo electr√≥nico"
            },
            "no_descarga_app": {
                "title": "No logro descargar el App",
                "answer": "Aseg√∫rate de que tu app store est√© configurada en la regi√≥n de Venezuela"
            },
            "no_abre_app": {
                "title": "No me abre el App",
                "answer": "Aseg√∫rate de tener la versi√≥n actualizada y que tu tienda de apps est√© configurada en la regi√≥n de Venezuela"
            },
            "recuperar_clave": {
                "title": "¬øC√≥mo recupero mi clave?",
                "answer": "Selecciona Recuperar, te llegar√° una clave temporal para ingresar y luego actualiza tu nueva clave"
            }
        }
    }
}

# Variable global para almacenar el estado de la conversaci√≥n
conversation_state: Dict[str, str] = {}

# ==================== Funciones para listas din√°micas ====================

def get_category_by_id(category_id: str) -> Optional[Dict[str, Any]]:
    """Obtiene una categor√≠a por su ID."""
    return QA_CATEGORIZED.get(category_id)

def get_answer_by_ids(category_id: str, question_id: str) -> str:
    """Obtiene la respuesta usando IDs de categor√≠a y pregunta."""
    category = get_category_by_id(category_id)
    if not category:
        return "Lo siento, la categor√≠a seleccionada no es v√°lida."
   
    question = category["questions"].get(question_id)
    if not question:
        return "Lo siento, la pregunta seleccionada no es v√°lida."
   
    return question["answer"]

# ==================== Funciones para enviar mensajes ====================

async def send_initial_menu_with_buttons(to_msisdn: str) -> Dict[str, Any]:
    """Env√≠a un men√∫ interactivo con dos botones para la selecci√≥n inicial."""
    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "interactive",
        "interactive": {
            "type": "button",
            "header": {
                "type": "text",
                "text": "üè¶ Bienvenido a Per Capital"
            },
            "body": {
                "text": "¬°Hola! Gracias por contactarnos. ¬øC√≥mo te gustar√≠a continuar?\n\n‚Ä¢ Puedes hablar con nuestro asistente virtual para respuestas inmediatas\n‚Ä¢ O contactar directamente con un agente de soporte humano"
            },
            "footer": {
                "text": "Selecciona una opci√≥n"
            },
            "action": {
                "buttons": [
                    {
                        "type": "reply",
                        "reply": {
                            "id": "bot_qa",
                            "title": "ü§ñ Asistente Virtual"
                        }
                    },
                    {
                        "type": "reply",
                        "reply": {
                            "id": "human_support",
                            "title": "üë®‚Äçüíº Soporte Humano"
                        }
                    }
                ]
            }
        }
    }
    return await _post_messages(payload)

async def send_main_menu_list(to_msisdn: str) -> Dict[str, Any]:
    """Env√≠a el men√∫ principal usando lista din√°mica."""
   
    # Preparar las secciones de la lista
    sections = []
    for category_id, category_data in QA_CATEGORIZED.items():
        sections.append({
            "title": category_data["title"],
            "rows": [
                {
                    "id": f"cat_{category_id}",
                    "title": "Ver preguntas",
                    "description": f"Explorar {category_data['title'].split(' ', 1)[1] if ' ' in category_data['title'] else category_data['title']}"
                }
            ]
        })
   
    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "interactive",
        "interactive": {
            "type": "list",
            "header": {
                "type": "text",
                "text": "üìã Men√∫ Principal"
            },
            "body": {
                "text": "Selecciona la categor√≠a sobre la que necesitas informaci√≥n:\n\nüí° Despu√©s de elegir una categor√≠a, podr√°s ver todas las preguntas disponibles en una lista."
            },
            "footer": {
                "text": "Per Capital - Tu inversi√≥n, nuestro compromiso"
            },
            "action": {
                "button": "Ver categor√≠as",
                "sections": sections
            }
        }
    }
   
    # Limpiar el estado de la conversaci√≥n
    if to_msisdn in conversation_state:
        del conversation_state[to_msisdn]
        logging.info(f"Estado de conversaci√≥n limpiado para {to_msisdn}")
   
    return await _post_messages(payload)

async def send_questions_list(to_msisdn: str, category_id: str) -> Dict[str, Any]:
    """Env√≠a la lista de preguntas para una categor√≠a espec√≠fica."""
    category = get_category_by_id(category_id)
    if not category:
        await send_text(to_msisdn, "‚ùå Categor√≠a no v√°lida.")
        await send_main_menu_list(to_msisdn)
        return {}

    # Preparar las filas de preguntas
    rows = []
    for question_id, question_data in category["questions"].items():
        # Usar solo el t√≠tulo completo, sin descripci√≥n adicional
        full_title = question_data["title"]
       
        # Crear t√≠tulo para mostrar (m√°ximo 24 caracteres para el t√≠tulo)
        if len(full_title) > 24:
            display_title = full_title[:21] + "..."
        else:
            display_title = full_title
           
        rows.append({
            "id": f"q_{category_id}_{question_id}",
            "title": display_title
            # NO incluir description para evitar duplicaci√≥n
        })

    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "interactive",
        "interactive": {
            "type": "list",
            "header": {
                "type": "text",
                "text": category["title"]
            },
            "body": {
                "text": f"Selecciona la pregunta que te interesa:\n\nüí° Despu√©s de leer la respuesta, podr√°s volver al men√∫ principal."
            },
            "footer": {
                "text": "Escribe 'volver' para regresar al men√∫"
            },
            "action": {
                "button": "Ver preguntas",
                "sections": [
                    {
                        "title": "Preguntas frecuentes",
                        "rows": rows
                    }
                ]
            }
        }
    }
   
    # Guardar el estado de la categor√≠a actual
    conversation_state[to_msisdn] = category_id
    logging.info(f"Estado guardado para {to_msisdn}: categor√≠a {category_id}")
   
    return await _post_messages(payload)

# ==================== Utilidades WhatsApp ====================

def verify_signature(signature: Optional[str], body: bytes) -> bool:
    """Verifica la firma HMAC-SHA256 de la solicitud de WhatsApp."""
    if not APP_SECRET:
        logging.warning("APP_SECRET no est√° configurada. La verificaci√≥n de firma est√° deshabilitada.")
        return True
   
    if not signature or not signature.startswith("sha256="):
        logging.error("Firma de la solicitud no v√°lida o ausente.")
        return False
   
    their_signature = signature.split("sha256=")[-1].strip()
    mac = hmac.new(APP_SECRET, msg=body, digestmod=hashlib.sha256)
    our_signature = mac.hexdigest()
   
    is_valid = hmac.compare_digest(our_signature, their_signature)
    if not is_valid:
        logging.error("La firma de la solicitud no coincide. Verifica tu APP_SECRET.")
    return is_valid

async def _post_messages(payload: Dict[str, Any]) -> Dict[str, Any]:
    """Funci√≥n auxiliar para enviar mensajes a trav√©s de la API de WhatsApp."""
    url = f"{GRAPH_BASE}/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
   
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(url, headers=headers, json=payload)
            response.raise_for_status()
            logging.info(f"‚úÖ Mensaje enviado con √©xito a {payload.get('to')}")
            return response.json()
    except httpx.HTTPStatusError as e:
        logging.error(f"‚ùå Error HTTP al enviar mensaje. Status: {e.response.status_code}")
        logging.error(f"Respuesta: {e.response.text}")
        raise HTTPException(status_code=500, detail=f"Error sending message: {e.response.status_code}")
    except Exception as e:
        logging.error(f"‚ùå Error inesperado al enviar mensaje: {e}")
        raise HTTPException(status_code=500, detail="Unexpected error sending message")

async def send_text(to_msisdn: str, text: str) -> Dict[str, Any]:
    """Env√≠a un mensaje de texto simple."""
    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "text",
        "text": {"body": text}
    }
    return await _post_messages(payload)

# ==================== Procesamiento de mensajes ====================

def is_back_command(text: str) -> bool:
    """Verifica si el mensaje es un comando para volver al men√∫ principal."""
    back_keywords = ["volver", "menu", "men√∫", "principal", "inicio", "back", "0"]
    return text.strip().lower() in back_keywords

async def process_text_message(from_msisdn: str, message_text: str) -> None:
    """Procesa los mensajes de texto del usuario."""
    text_clean = message_text.strip()
   
    logging.info(f"üìù Procesando mensaje de texto de {from_msisdn}: '{text_clean}'")
   
    # Verificar si es un comando para volver al men√∫ principal
    if is_back_command(text_clean):
        logging.info(f"üîÑ Usuario {from_msisdn} solicit√≥ volver al men√∫ principal")
        await send_main_menu_list(from_msisdn)
        return
   
    # Para cualquier otro mensaje de texto, mostrar el men√∫ inicial con botones
    logging.info(f"üîÑ Enviando men√∫ inicial con botones a {from_msisdn}")
    await send_initial_menu_with_buttons(from_msisdn)

async def process_interactive_message(from_msisdn: str, interactive_data: Dict[str, Any]) -> None:
    """Procesa los mensajes interactivos (respuestas de botones y listas)."""
    interactive_type = interactive_data.get("type")
   
    if interactive_type == "button_reply":
        button_reply = interactive_data.get("button_reply", {})
        button_id = button_reply.get("id")
        button_title = button_reply.get("title")
       
        logging.info(f"üîò Usuario {from_msisdn} presion√≥ bot√≥n: {button_id} ({button_title})")
       
        if button_id == "bot_qa":
            await send_text(from_msisdn, "ü§ñ *Perfecto!* Has seleccionado el asistente virtual.\n\nAhora te mostrar√© las categor√≠as disponibles:")
            await send_main_menu_list(from_msisdn)
        elif button_id == "human_support":
            await send_text(from_msisdn,
                "üë®‚Äçüíº *Soporte Humano Activado*\n\n"
                "Gracias por contactarnos. Un miembro especializado de nuestro equipo de Per Capital "
                "se pondr√° en contacto contigo a la brevedad posible.\n\n"
                "üìû Tambi√©n puedes llamarnos directamente si tu consulta es urgente.\n\n"
                "Esta conversaci√≥n autom√°tica ha finalizado. ¬°Que tengas un excelente d√≠a! üôã‚Äç‚ôÄÔ∏è")
            if from_msisdn in conversation_state:
                del conversation_state[from_msisdn]
        else:
            logging.warning(f"‚ö†Ô∏è ID de bot√≥n desconocido: {button_id}")
            await send_initial_menu_with_buttons(from_msisdn)
   
    elif interactive_type == "list_reply":
        list_reply = interactive_data.get("list_reply", {})
        list_id = list_reply.get("id")
        list_title = list_reply.get("title")
       
        logging.info(f"üìã Usuario {from_msisdn} seleccion√≥ de lista: {list_id} ({list_title})")
       
        if list_id.startswith("cat_"):
            # Selecci√≥n de categor√≠a
            category_id = list_id.replace("cat_", "")
            await send_questions_list(from_msisdn, category_id)
           
        elif list_id.startswith("q_"):
            # Selecci√≥n de pregunta
            parts = list_id.replace("q_", "").split("_", 1)
            if len(parts) == 2:
                category_id, question_id = parts
                
                # Obtener la pregunta y respuesta de la base de datos
                category = get_category_by_id(category_id)
                if category and question_id in category["questions"]:
                    question_title = category["questions"][question_id]["title"]
                    answer = category["questions"][question_id]["answer"]
                    
                    # Enviar la pregunta y respuesta sin duplicaci√≥n
                    await send_text(from_msisdn, f"‚ùì *{question_title}*\n\n‚úÖ *Respuesta:*\n{answer}")
                else:
                    await send_text(from_msisdn, "‚ùå Error: Pregunta no encontrada.")
                    await send_main_menu_list(from_msisdn)
                    return
               
                # Peque√±a pausa antes de enviar opciones
                import asyncio
                await asyncio.sleep(2)
               
                # Ofrecer opciones para continuar
                await send_text(from_msisdn, "üìã ¬øNecesitas informaci√≥n sobre otro tema?")
                await send_main_menu_list(from_msisdn)
            else:
                logging.error(f"‚ùå Formato de ID de pregunta inv√°lido: {list_id}")
                await send_text(from_msisdn, "‚ùå Error al procesar la pregunta seleccionada.")
                await send_main_menu_list(from_msisdn)
        else:
            logging.warning(f"‚ö†Ô∏è ID de lista desconocido: {list_id}")
            await send_main_menu_list(from_msisdn)
    else:
        logging.warning(f"‚ö†Ô∏è Tipo de mensaje interactivo desconocido: {interactive_type}")
        await send_initial_menu_with_buttons(from_msisdn)

# ==================== Endpoints de FastAPI ====================

@app.get("/webhook")
async def verify_webhook(
    hub_mode: str | None = Query(None, alias="hub.mode"),
    hub_challenge: str | None = Query(None, alias="hub.challenge"),
    hub_verify_token: str | None = Query(None, alias="hub.verify_token"),
):
    """Endpoint para la verificaci√≥n del webhook de WhatsApp."""
    logging.info(f"üîç Verificando webhook - Mode: {hub_mode}, Token: {hub_verify_token}")
   
    if hub_mode == "subscribe" and hub_verify_token == VERIFY_TOKEN:
        logging.info("‚úÖ Verificaci√≥n de webhook exitosa")
        return PlainTextResponse(content=hub_challenge or "", status_code=200)
   
    logging.error("‚ùå Fallo en la verificaci√≥n del webhook - Token o modo incorrectos")
    raise HTTPException(status_code=403, detail="Verification token mismatch")

@app.post("/webhook")
async def receive_webhook(request: Request):
    """Endpoint principal para recibir mensajes de WhatsApp."""
    try:
        body_bytes = await request.body()
        signature = request.headers.get("X-Hub-Signature-256")
       
        if not verify_signature(signature, body_bytes):
            logging.error("‚ùå Firma de solicitud inv√°lida")
            raise HTTPException(status_code=403, detail="Invalid signature")
       
        data = await request.json()
        logging.info(f"üì® Webhook recibido: {json.dumps(data, indent=2)}")
       
        if data.get("object") != "whatsapp_business_account":
            logging.info("‚ÑπÔ∏è Notificaci√≥n ignorada - No es de WhatsApp Business")
            return Response(status_code=200)
       
        for entry in data.get("entry", []):
            for change in entry.get("changes", []):
                value = change.get("value", {})
               
                messages = value.get("messages")
                if not messages:
                    logging.info("‚ÑπÔ∏è No hay mensajes en esta notificaci√≥n")
                    continue
               
                for message in messages:
                    from_msisdn = message.get("from")
                    message_type = message.get("type")
                    message_id = message.get("id")
                   
                    logging.info(f"üì¨ Procesando mensaje {message_id} de {from_msisdn} (tipo: {message_type})")
                   
                    if message_type == "interactive":
                        interactive_data = message.get("interactive", {})
                        await process_interactive_message(from_msisdn, interactive_data)
                       
                    elif message_type == "text":
                        text_data = message.get("text", {})
                        message_text = text_data.get("body", "")
                        await process_text_message(from_msisdn, message_text)
                       
                    else:
                        logging.info(f"üìé Mensaje de tipo '{message_type}' recibido - Enviando men√∫ inicial")
                        await send_initial_menu_with_buttons(from_msisdn)
       
        return Response(status_code=200)
       
    except json.JSONDecodeError:
        logging.error("‚ùå Error al decodificar JSON en la solicitud")
        raise HTTPException(status_code=400, detail="Invalid JSON")
    except Exception as e:
        logging.error(f"‚ùå Error inesperado procesando webhook: {e}", exc_info=True)
        return Response(status_code=500, content="Internal Server Error")

@app.get("/")
async def health_check():
    """Endpoint de salud para verificar que el servicio est√° funcionando."""
    return {
        "status": "ok",
        "service": "WhatsApp Bot Per Capital - Lista Din√°mica",
        "version": "3.0",
        "categories": len(QA_CATEGORIZED),
        "active_conversations": len(conversation_state)
    }

@app.get("/status")
async def status_endpoint():
    """Endpoint de estado detallado para monitoreo."""
    return {
        "service_status": "running",
        "environment_variables": {
            "VERIFY_TOKEN": "‚úÖ" if VERIFY_TOKEN else "‚ùå",
            "WHATSAPP_TOKEN": "‚úÖ" if WHATSAPP_TOKEN else "‚ùå",
            "PHONE_NUMBER_ID": "‚úÖ" if PHONE_NUMBER_ID else "‚ùå",
            "APP_SECRET": "‚úÖ" if APP_SECRET else "‚ùå"
        },
        "qa_categories": list(QA_CATEGORIZED.keys()),
        "total_questions": sum(len(cat["questions"]) for cat in QA_CATEGORIZED.values()),
        "active_conversations": len(conversation_state),
        "graph_api_version": GRAPH_API_VERSION
    }

@app.get("/clear-conversations")
async def clear_conversations():
    """Endpoint para limpiar todas las conversaciones activas."""
    global conversation_state
    count = len(conversation_state)
    conversation_state.clear()
    logging.info(f"üßπ Conversaciones limpiadas: {count}")
    return {
        "status": "success",
        "cleared_conversations": count,
        "message": f"Se limpiaron {count} conversaciones activas"
    }

# ==================== Manejo de errores globales ====================

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Maneja todas las excepciones no capturadas."""
    logging.error(f"‚ùå Excepci√≥n global no manejada: {exc}", exc_info=True)
    return Response(
        status_code=500,
        content=json.dumps({
            "error": "Internal server error",
            "message": "Se produjo un error inesperado en el servidor"
        }),
        media_type="application/json"
    )

# ==================== Mensaje de inicio del servidor ====================

if __name__ == "__main__":
    print("üöÄ Iniciando WhatsApp Bot Per Capital con Listas Din√°micas...")
    print(f"üìä Categor√≠as cargadas: {len(QA_CATEGORIZED)}")
    total_questions = 0
    for category_id, category_data in QA_CATEGORIZED.items():
        questions_count = len(category_data["questions"])
        total_questions += questions_count
        print(f"   ‚Ä¢ {category_data['title']}: {questions_count} preguntas")
    print(f"üìù Total de preguntas: {total_questions}")
    print("‚úÖ Bot con listas din√°micas listo para recibir mensajes!")
