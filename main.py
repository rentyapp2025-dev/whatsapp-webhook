import os
import hmac
import hashlib
import json
import re
from typing import Optional, Any, Dict, List
import logging

from fastapi import FastAPI, Request, Response, HTTPException, Query
from fastapi.responses import PlainTextResponse
import httpx

# Configurar el logging para ver mensajes detallados
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Obtener variables de entorno. Es crucial que estas est√©n configuradas correctamente.
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "")
WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN", "")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID", "")
APP_SECRET = os.getenv("APP_SECRET", "").encode("utf-8") if os.getenv("APP_SECRET") else b""
GRAPH_API_VERSION = os.getenv("GRAPH_API_VERSION", "v20.0")
GRAPH_BASE = f"https://graph.facebook.com/{GRAPH_API_VERSION}"

# Verificar que las variables de entorno cruciales est√©n presentes
if not all([VERIFY_TOKEN, WHATSAPP_TOKEN, PHONE_NUMBER_ID]):
    logging.error("Faltan variables de entorno cruciales: VERIFY_TOKEN, WHATSAPP_TOKEN, o PHONE_NUMBER_ID no est√°n configuradas.")
    logging.info("Aseg√∫rate de configurar estas variables en tu entorno de despliegue (por ejemplo, en Render.com).")

app = FastAPI(title="WhatsApp Cloud API Webhook (Render/FastAPI)")

# ==================== Base de conocimiento ZENDESK Per Capital ====================
# Estructura actualizada con las preguntas y respuestas del documento ZENDESK
QA_ZENDESK = {
    "per_capital": {
        "title": "üè¢ Per Capital",
        "questions": {
            "¬øQu√© es Per Capital?": "Es un grupo de empresas del Mercado de Valores Venezolano reguladas por la SUNAVAL.",
            "¬øQui√©n regula a PER CAPITAL?": "La SUNAVAL (Superintendencia Nacional de Valores)",
            "¬øQu√© es la SUNAVAL?": "Es quien protege a inversionistas y regula a intermediarios y emisores del Mercado de Valores venezolano",
            "¬øQu√© es la Bolsa de Valores de Caracas?": "Es el lugar donde se compran y venden bonos, acciones y otros instrumentos de manera ordenada a trav√©s de las Casas de Bolsa y est√° regulada por la SUNAVAL",
            "¬øC√≥mo invierto?": "Para invertir en el Fondo Mutual Abierto de PER CAPITAL debes descargar el app, registrarte, subir recaudos y colocar tus √≥rdenes de compra."
        }
    },
    "fondo_mutual": {
        "title": "üìä Fondo Mutual Abierto",
        "questions": {
            "¬øQu√© es un Fondo Mutual?": "Es un instrumento de inversi√≥n en grupo donde varias personas ponen dinero en un fondo que es gestionado por expertos y est√° dise√±ado para ser diversificado, de bajo riesgo y dirigido a peque√±os inversionistas con poca experiencia",
            "¬øQu√© es una Unidad de Inversi√≥n?": "Es una 'porci√≥n' del fondo. Cuando inviertes adquieres unidades que representan tu parte del fondo.",
            "¬øQu√© es el VUI?": "El Valor de la Unidad de Inversi√≥n (VUI) es el precio de una Unidad de Inversi√≥n. Si el VUI sube tu inversi√≥n gana valor. Se calcula diariamente al cierre del d√≠a y depende del comportamiento de las inversiones del fondo.",
            "¬øC√≥mo invierto?": "Descarga el app para Android y iOS, reg√≠strate, sube recaudos, acepta los contratos, espera tu aprobaci√≥n y suscribe Unidades de Inversi√≥n cuando quieras y cuantas veces desees",
            "¬øCu√°l es el monto m√≠nimo de inversi√≥n?": "1 Unidad de Inversi√≥n",
            "¬øC√≥mo gano?": "Ganas por apreciaci√≥n (subida del VUI) o por dividendo (en caso de que sea decretado)",
            "¬øEn cu√°nto tiempo gano?": "Ganas a largo plazo, se recomienda medir resultados trimestralmente",
            "¬øD√≥nde consigo m√°s informaci√≥n?": "En los prospectos y hojas de t√©rminos en www.per-capital.com"
        }
    },
    "app": {
        "title": "üì± Aplicaci√≥n",
        "questions": {
            "¬øPuedo comprar acciones y bonos?": "No, nuestra app es √∫nicamente para invertir en nuestro Fondo Mutual Abierto. Pronto saldr√° la nueva versi√≥n de nuestra app para negociar",
            "¬øC√≥mo me registro?": "Descarga el app, completa 100% de los datos, acepta los contratos, sube recaudos como C√©dula de Identidad y Selfie y espera tu aprobaci√≥n.",
            "¬øCu√°nto tarda mi aprobaci√≥n?": "De 2 a 5 d√≠as h√°biles siempre que hayas completado 100% de registro y recaudos",
            "¬øQu√© hago si no me aprueban?": "Revisa que hayas completado 100% del registro y recaudos, sino cont√°ctanos en SOPORTE",
            "¬øPuedo invertir si soy menor de edad?": "Debes dirigirte a nuestras oficinas y registrarte con tu representante legal",
            "¬øPuedo modificar alguno de mis datos?": "S√≠, pero por exigencia de la ley entras nuevamente en revisi√≥n",
            "¬øDebo tener cuenta en la Caja Venezolana?": "No, para invertir en nuestro Fondo Mutual Abierto no es necesaria la cuenta en la CVV"
        }
    },
    "transacciones": {
        "title": "üí∞ Suscripci√≥n y Rescate",
        "questions": {
            "¬øC√≥mo suscribo (compro)?": "Haz click en Negociaci√≥n > Suscripci√≥n > Monto a invertir > Suscribir > M√©todo de Pago. Recuerda pagar desde TU cuenta bancaria y subir comprobante de pago",
            "¬øC√≥mo pago mi suscripci√≥n?": "Debes pagar desde TU cuenta bancaria v√≠a Pago M√≥vil. Y recuerda subir comprobante. IMPORTANTE: no se aceptan pagos de terceros.",
            "¬øPuede pagar alguien por m√≠?": "No, la ley proh√≠be los pagos de terceros. Siempre debes pagar desde tu cuenta bancaria.",
            "¬øC√≥mo veo mi inversi√≥n?": "En el Home en la secci√≥n Mi Cuenta",
            "¬øCu√°ndo veo mi inversi√≥n?": "Al cierre del sistema en d√≠as h√°biles bancarios despu√©s del cierre de mercado y la publicaci√≥n de tasas del Banco Central de Venezuela.",
            "¬øCu√°les son las comisiones?": "3% flat Suscripci√≥n, 3% flat Rescate y 5% anual Administraci√≥n",
            "¬øQu√© hago despu√©s de suscribir?": "Monitorea tu inversi√≥n desde el app",
            "¬øC√≥mo rescato (vendo)?": "Haz click en Negociaci√≥n > Rescate > Unidades a Rescatar > Rescatar. Recuerda se enviar√°n fondos a TU cuenta bancaria",
            "¬øCu√°ndo me pagan mis rescates?": "Al pr√≥ximo d√≠a h√°bil bancario en horario de mercado",
            "¬øCu√°ndo puedo Rescatar?": "Cuando t√∫ quieras, y se liquida en d√≠as h√°biles bancarios."
        }
    },
    "soporte": {
        "title": "üõü Soporte y Ayuda",
        "questions": {
            "¬øEstoy en revisi√≥n, qu√© hago?": "Aseg√∫rate de haber completado 100% datos y recaudos y espera tu aprobaci√≥n. Si tarda m√°s de lo habitual cont√°ctanos en SOPORTE",
            "¬øNo me llega el SMS?": "Aseg√∫rate de tener buena se√±al y de que hayas colocado correctamente un n√∫mero telef√≥nico venezolano",
            "¬øNo me llega el Correo?": "Aseg√∫rate de no dejar espacios al final cuando escribiste tu correo electr√≥nico",
            "¬øNo logro descargar el App?": "Aseg√∫rate de que tu app store est√© configurada en la regi√≥n de Venezuela",
            "¬øNo me abre el App?": "Aseg√∫rate de tener la versi√≥n actualizada y que tu tienda de apps est√© configurada en la regi√≥n de Venezuela",
            "¬øC√≥mo recupero mi clave?": "Seleccione Recuperar, te llegar√° una clave temporal para ingresar y luego actualiza tu nueva clave",
            "¬øCu√°les son los riesgos al invertir?": "Todas las inversiones est√°n sujetas a riesgos y la p√©rdida de capital es posible. Algunos riesgos son: riesgo de mercado, riesgo pa√≠s, riesgo cambiario, riesgo sector, entre otros.",
            "¬øPor qu√© var√≠a mi posici√≥n (saldo)?": "Tu saldo y rendimiento sube si suben los precios de las inversiones del fondo, se reciben dividendos o cupones y bajan si estos precios caen.",
            "¬øCu√°ndo se actualiza mi posici√≥n?": "Al cierre del sistema en d√≠as h√°biles bancarios despu√©s del cierre de mercado y la publicaci√≥n de tasas del Banco Central de Venezuela."
        }
    }
}

# Variable global para almacenar el estado de la conversaci√≥n
conversation_state: Dict[str, str] = {}

# ==================== Funciones de la l√≥gica del men√∫ ====================

def get_category_by_id(category_id: str) -> Optional[Dict[str, Any]]:
    """
    Obtiene una categor√≠a por su ID.
    """
    return QA_ZENDESK.get(category_id)


def get_answer_by_question_index(category_id: str, question_index: int) -> str:
    """
    Obtiene la respuesta usando el ID de categor√≠a y el √≠ndice de la pregunta.
    """
    category = get_category_by_id(category_id)
    if not category:
        return "Lo siento, la categor√≠a seleccionada no es v√°lida."
   
    questions = list(category["questions"].keys())
    if 1 <= question_index <= len(questions):
        question = questions[question_index - 1]
        return category["questions"][question]
   
    return "Lo siento, el n√∫mero de pregunta no es v√°lido. Por favor, elige un n√∫mero del submen√∫."


def is_back_command(text: str) -> bool:
    """
    Verifica si el mensaje es un comando para volver al men√∫ principal.
    """
    back_keywords = ["volver", "menu", "men√∫", "principal", "inicio", "back", "0"]
    return text.strip().lower() in back_keywords


buttons(to_msisdn: str) -> Dict[str, Any]:
async def send_main_menu_buttons(to_msisdn: str) -> Dict[str, Any]:
    """
    Env√≠a el men√∫ principal con botones para las categor√≠as principales.
    """
    # Limpiar el estado de la conversaci√≥n
    if to_msisdn in conversation_state:
        del conversation_state[to_msisdn]
        logging.info(f"Estado de conversaci√≥n limpiado para {to_msisdn}")
   
    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "interactive",
        "interactive": {
            "type": "button",
            "header": {
                "type": "text",
                "text": "üìã Men√∫ Principal - Per Capital"
            },
            "body": {
                "text": "Selecciona la categor√≠a sobre la que necesitas informaci√≥n:\n\nüè¢ **Per Capital** - Informaci√≥n general\nüìä **Fondo Mutual** - Inversiones y rendimientos\nüì± **Aplicaci√≥n** - Registro y uso del app"
            },
            "footer": {
                "text": "Elige una categor√≠a"
            },
            "action": {
                "buttons": [
                    {
                        "type": "reply",
                        "reply": {
                            "id": "per_capital",
                            "title": "üè¢ Per Capital"
                        }
                    },
                    {
                        "type": "reply",
                        "reply": {
                            "id": "fondo_mutual",
                            "title": "üìä Fondo Mutual"
                        }
                    },
                    {
                        "type": "reply",
                        "reply": {
                            "id": "app",
                            "title": "üì± Aplicaci√≥n"
                        }
                    }
                ]
            }
        }
    }
    return await _post_messages(payload)


async def send_secondary_menu_buttons(to_msisdn: str) -> Dict[str, Any]:
    """
    Env√≠a el segundo men√∫ con botones para categor√≠as adicionales.
    """
    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "interactive",
        "interactive": {
            "type": "button",
            "header": {
                "type": "text",
                "text": "üìã M√°s Categor√≠as"
            },
            "body": {
                "text": "Aqu√≠ tienes m√°s categor√≠as disponibles:\n\nüí∞ **Transacciones** - Suscripci√≥n y rescate\nüõü **Soporte** - Ayuda y resoluci√≥n de problemas\n\n¬øSobre qu√© tema necesitas ayuda?"
            },
            "footer": {
                "text": "Elige una categor√≠a"
            },
            "action": {
                "buttons": [
                    {
                        "type": "reply",
                        "reply": {
                            "id": "transacciones",
                            "title": "üí∞ Transacciones"
                        }
                    },
                    {
                        "type": "reply",
                        "reply": {
                            "id": "soporte",
                            "title": "üõü Soporte"
                        }
                    },
                    {
                        "type": "reply",
                        "reply": {
                            "id": "back_to_main",
                            "title": "üîô Men√∫ Principal"
                        }
                    }
                ]
            }
        }
    }
    return await _post_messages(payload)


async def send_list_questions(to_msisdn: str, category_id: str) -> Dict[str, Any]:
    """
    Env√≠a una lista de preguntas para una categor√≠a espec√≠fica usando list messages.
    """
    category = get_category_by_id(category_id)
    if not category:
        await send_text(to_msisdn, "‚ùå Categor√≠a no v√°lida.")
        await send_main_menu_buttons(to_msisdn)
        return {}

    questions = list(category["questions"].keys())
   
    # WhatsApp permite m√°ximo 10 opciones en una lista
    if len(questions) > 10:
        questions = questions[:10]
        logging.warning(f"Limitando preguntas a 10 para la categor√≠a {category_id}")

    # Crear las filas de la lista
    rows = []
    for i, question in enumerate(questions, 1):
        rows.append({
            "id": f"{category_id}_{i}",
            "title": f"{i}. " + (question[:20] + "..." if len(question) > 20 else question),
            "description": question[:60] + "..." if len(question) > 60 else question
        })

    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "interactive",
        "interactive": {
            "type": "list",
            "header": {
                "type": "text",
                "text": category["title"]
            },
            "body": {
                "text": f"Selecciona una pregunta de la categor√≠a *{category['title']}*:\n\nEscribe 'volver' para regresar al men√∫ principal."
            },
            "footer": {
                "text": "Per Capital - FAQ"
            },
            "action": {
                "button": "Ver Preguntas",
                "sections": [
                    {
                        "title": "Preguntas Disponibles",
):
.strip()
signature, their_signature)
ID}/messages"
            # Devuelve el JSON de la respuesta si lo hay
            try:
                return response.json()
            except Exception:
                return {}
    except httpx.HTTPStatusError as e:
        logging.error(f"‚ùå Error HTTP al enviar mensaje. Status: {e.response.status_code}")
        logging.error(f"Respuesta: {e.response.text}")
        raise HTTPException(status_code=500, detail=f"Error sending message: {e.response.status_code}")
    except Exception as e:
        logging.error(f"‚ùå Error inesperado al enviar mensaje: {e}")
        raise HTTPException(status_code=500, detail="Unexpected error sending message")


async def send_text(to_msisdn: str, text: str) -> Dict[str, Any]:
    """
    Env√≠a un mensaje de texto simple.
    """
    payload = {
        "messaging_product": "whatsapp",
        "to": to_msisdn,
        "type": "text",
        "text": {"body": text}
    }
    return await _post_messages(payload)


# ==================== Procesamiento de mensajes ====================

async def process_text_message(from_msisdn: str, message_text: str) -> None:
    """
    Procesa los mensajes de texto del usuario seg√∫n el flujo de conversaci√≥n.
    """
    text_clean = message_text.strip()
    logging.info(f"üìù Procesando mensaje de texto de {from_msisdn}: '{text_clean}'")
   
    # Verificar si es un comando para volver al men√∫ principal
    if is_back_command(text_clean):
        logging.info(f"üîÑ Usuario {from_msisdn} solicit√≥ volver al men√∫ principal")
        await send_main_menu_buttons(from_msisdn)
        return
   
    # Para cualquier mensaje de texto, enviar el men√∫ inicial con botones
    logging.info(f"üîÑ Enviando men√∫ inicial con botones a {from_msisdn}")
    await send_initial_menu_with_buttons(from_msisdn)


async def process_interactive_message(from_msisdn: str, interactive_data: Dict[str, Any]) -> None:
    """
    Procesa los mensajes interactivos (respuestas de botones y listas).
    """
    interactive_type = interactive_data.get("type")
   
    if interactive_type == "button_reply":
        button_reply = interactive_data.get("button_reply", {})
        button_id = button_reply.get("id")
        button_title = button_reply.get("title")
       
        logging.info(f"üîò Usuario {from_msisdn} presion√≥ bot√≥n: {button_id} ({button_title})")
       
        if button_id == "bot_qa":
            # Iniciar flujo de Q&A con men√∫ principal de botones
            await send_text(from_msisdn, "ü§ñ *¬°Perfecto!* Has seleccionado el asistente virtual.\n\nAhora te mostrar√© las categor√≠as disponibles:")
            await send_main_menu_buttons(from_msisdn)
           
        elif button_id == "human_support":
            # Contactar soporte humano
            await send_text(from_msisdn,
                "üë®‚Äçüíº *Soporte Humano Activado*\n\n"
                "Gracias por contactarnos. Un miembro especializado de nuestro equipo de Per Capital "
                "se pondr√° en contacto contigo a la brevedad posible.\n\n"
                "üìû Tambi√©n puedes llamarnos directamente si tu consulta es urgente.\n\n"
                "Esta conversaci√≥n autom√°tica ha finalizado. ¬°Que tengas un excelente d√≠a! üôã‚Äç‚ôÄÔ∏è")
            # Limpiar estado de conversaci√≥n
            if from_msisdn in conversation_state:
                del conversation_state[from_msisdn]
               
        elif button_id == "back_to_main":
            # Volver al men√∫ principal
            await send_main_menu_buttons(from_msisdn)
           
        elif button_id == "more_categories":
            # Mostrar m√°s categor√≠as
            await send_secondary_menu_buttons(from_msisdn)
           
        elif button_id in ["per_capital", "fondo_mutual", "app"]:
            # Mostrar lista de preguntas para estas categor√≠as
            await send_list_questions(from_msisdn, button_id)
           
        elif button_id in ["transacciones", "soporte"]:
            # Mostrar lista de preguntas para estas categor√≠as
            await send_list_questions(from_msisdn, button_id)
           
        else:
            logging.warning(f"‚ö†Ô∏è ID de bot√≥n desconocido: {button_id}")
            await send_initial_menu_with_buttons(from_msisdn)
   
    elif interactive_type == "list_reply":
        list_reply = interactive_data.get("list_reply", {})
        list_id = list_reply.get("id")
        list_title = list_reply.get("title")
       
        logging.info(f"üìã Usuario {from_msisdn} seleccion√≥ de lista: {list_id} ({list_title})")
       
        # Parsear el ID para obtener categor√≠a y n√∫mero de pregunta
        if "_" in list_id:
            category_id, question_index_str = list_id.rsplit("_", 1)
            try:
                question_index = int(question_index_str)
               
                # Obtener la respuesta
                response_text = get_answer_by_question_index(category_id, question_index)
               
                # Enviar la respuesta
                await send_text(from_msisdn, f"‚úÖ *Respuesta:*\n\n{response_text}")
               
                # Peque√±a pausa antes de mostrar opciones
                import asyncio
                await asyncio.sleep(1)
               
                # Preguntar si necesita algo m√°s y ofrecer opciones
                await send_text(from_msisdn, "üìã ¬øNecesitas ayuda con algo m√°s?")
               
                # Ofrecer el men√∫ secundario si es una de las primeras 3 categor√≠as
                if category_id in ["per_capital", "fondo_mutual", "app"]:
                    await send_secondary_menu_buttons(from_msisdn)
                else:
                    await send_main_menu_buttons(from_msisdn)
                   
            except (ValueError, IndexError):
                logging.error(f"‚ùå Error parseando list_id: {list_id}")
                await send_text(from_msisdn, "‚ùå Error procesando tu selecci√≥n.")
                await send_main_menu_buttons(from_msisdn)
        else:
            logging.error(f"‚ùå Formato de list_id inv√°lido: {list_id}")
            await send_main_menu_buttons(from_msisdn)
   
    else:
        logging.warning(f"‚ö†Ô∏è Tipo de interacci√≥n desconocido: {interactive_type}")
        await send_initial_menu_with_buttons(from_msisdn)


# ==================== Endpoints de FastAPI ====================

@app.get("/webhook")
async def verify_webhook(
    hub_mode: str | None = Query(None, alias="hub.mode"),
    hub_challenge: str | None = Query(None, alias="hub.challenge"),
    hub_verify_token: str | None = Query(None, alias="hub.verify_token"),
):
    """
    Endpoint para la verificaci√≥n del webhook de WhatsApp.
    Facebook/Meta llama a este endpoint para verificar la autenticidad del webhook.
    """
    logging.info(f"üîç Verificando webhook - Mode: {hub_mode}, Token: {hub_verify_token}")
   
    if hub_mode == "subscribe" and hub_verify_token == VERIFY_TOKEN:
        logging.info("‚úÖ Verificaci√≥n de webhook exitosa")
        return PlainTextResponse(content=hub_challenge or "", status_code=200)
   
    logging.warning("‚ùå Intento de verificaci√≥n fallido del webhook")
    return PlainTextResponse(content="Verification token mismatch", status_code=403)


# ==================== Endpoint para recibir mensajes (POST) ====================

@app.post("/webhook")
async def handle_webhook(request: Request):
    """
    Endpoint que recibe mensajes entrantes de WhatsApp.
    WhatsApp enviar√° aqu√≠ cada evento (mensajes, estados, etc.)
    """
    try:
        # Obtener headers y body en bytes (necesario para verificar firma)
        signature = request.headers.get("X-Hub-Signature-256")
        body_bytes = await request.body()

        # Verificar firma HMAC
        if not verify_signature(signature, body_bytes):
            logging.error("‚ùå Firma no v√°lida en la solicitud entrante")
            raise HTTPException(status_code=403, detail="Firma inv√°lida")

        # Parsear JSON desde body_bytes (evita leer el body dos veces)
        try:
            data = json.loads(body_bytes.decode("utf-8"))
        except Exception as e:
            logging.error(f"‚ùå No se pudo parsear JSON del body: {e}")
            raise HTTPException(status_code=400, detail="Invalid JSON")

        logging.info(f"üì© Webhook recibido: {json.dumps(data, indent=2, ensure_ascii=False)}")

        # Navegar la estructura t√≠pica del webhook de WhatsApp
        entries = data.get("entry", [])
        if not entries:
            logging.info("‚ÑπÔ∏è Webhook sin 'entry' - nothing to process")
            return Response(status_code=200)

        # Iterar entradas y cambios por seguridad (puede venir m√°s de una)
        for entry in entries:
            changes = entry.get("changes", [])
            for change in changes:
                value = change.get("value", {})
                # Mensajes entrantes
                messages = value.get("messages", []) or []
                if not messages:
                    logging.info("‚ÑπÔ∏è Cambio sin mensajes (posible status update) - skipping")
                    continue

                for message in messages:
                    from_msisdn = message.get("from")
                    if not from_msisdn:
                        logging.warning("‚ö†Ô∏è Mensaje sin campo 'from' - skipping")
                        continue

                    message_type = message.get("type")
                    logging.info(f"üì• Mensaje de {from_msisdn} tipo {message_type}")

                    if message_type == "text":
                        text_body = message.get("text", {}).get("body", "")
                        await process_text_message(from_msisdn, text_body)

                    elif message_type == "interactive":
                        interactive_data = message.get("interactive", {})
                        await process_interactive_message(from_msisdn, interactive_data)

                    else:
                        logging.warning(f"‚ö†Ô∏è Tipo de mensaje no manejado: {message_type}")
                        await send_text(from_msisdn, "Lo siento, a√∫n no puedo procesar este tipo de mensaje üôè")

        return Response(status_code=200)

    except HTTPException:
        raise
    except Exception as e:
        logging.exception(f"‚ùå Error en handle_webhook: {e}")
        raise HTTPException(status_code=500, detail="Error interno en webhook")


# ==================== Run local (opcional) ====================

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "8000"))
    uvicorn.run(app, host="0.0.0.0", port=port)